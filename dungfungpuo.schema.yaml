# Rime schema
# encoding: utf-8

schema:
  schema_id: dungfungpuo
  name: 東風破 ₀.₁
  version: "0.2.futzhin"
  author:
    - Patrick <ipatrickmac@gmail.com>
  description: |
    東風破早梅
    向煗一枝開
    冰雪無人見
    春從天上來

switches:
  - name: ascii_mode
    reset: 0
    states: ["中文", "西文"]
  - name: full_shape
    states: ["半角", "全角"]
  - name: simplification
    states: ["傳統", "簡化"]

engine:
  processors:
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - reverse_lookup_translator
    - script_translator
  filters:
    - simplifier
    - uniquifier

speller:
  alphabet: 'zyxwvutsrqponmlkjihgfedcba-;/<,>\'
  initials: zyxwvutsrqponmlkjihgfedcba
  delimiter: " '"
  algebra:
    - abbrev/^([a-z]).+$/$1/
    - abbrev/^([zcsr]h).+$/$1/
    - abbrev/^([zcsr]h)y/$1i/
    - derive/rh/r/
    - derive/zh/j/
    - derive/iu/yu/
    - derive/iue/ue/
    - derive/iou/io/
    - derive/au/ao/
    - derive/ung/ong/
    - derive/([aeiou])ng/$1gn/
    - derive/([bpmdtnl]|[zcsr]h?)uo/$1o/
    - derive/([bpm])ei/$1ui/
    - derive/wui/wi/
    - derive/([iu])a(o|ng?)/a$1$2/
    - derive/^([a-z]+)[0-4]$/$1/
    - derive/([dtngkhrzcs])o(u|ng)$/$1o/
    - derive/ong$/on/
    - 'xlit 1234 -</\'
    - 'derive/^(.*)-$/$1;/'
    - 'derive/^(.*)<$/$1,/'
    - 'derive/^(.*)\\$/$1>/'

translator:
  dictionary: dungfungpuo
  spelling_hints: 9
  preedit_format:
    - 'xform ([aeiou])(ng?|[ptkm])([-;/<,>\\]) $1$3$2'
    - 'xform ([aeo])([iuo])([-;/<,>\\]) $1$3$2'
    - 'xform c([aou]) ç$1'
    - 'xform ([zcsgkh])u(e) $1ü$2'
    - 'xform a[-;] ā'
    - 'xform a/ á'
    - 'xform a[<,] â'
    - 'xform a[>\\] à'
    - 'xform e[-;] ē'
    - 'xform e/ é'
    - 'xform e[<,] ê'
    - 'xform e[>\\] è'
    - 'xform o[-;] ō'
    - 'xform o/ ó'
    - 'xform o[<,] ô'
    - 'xform o[>\\] ò'
    - 'xform i[-;] ī'
    - 'xform i/ í'
    - 'xform i[<,] î'
    - 'xform i[>\\] ì'
    - 'xform u[-;] ū'
    - 'xform u/ ú'
    - 'xform u[<,] û'
    - 'xform u[>\\] ù'
    - 'xform y[-;] ȳ'
    - 'xform y/ ý'
    - 'xform y[<,] ŷ'
    - 'xform y[>\\] ỳ'
  comment_format:
    - xform ([aeiou])(ng?||[ptkm])([1234]) $1$3$2
    - xform ([aeo])([iuo])([1234]) $1$3$2
    - xform a1 ā
    - xform a2 â
    - xform a3 á
    - xform a4 à
    - xform e1 ē
    - xform e2 ê
    - xform e3 é
    - xform e4 è
    - xform o1 ō
    - xform o2 ô
    - xform o3 ó
    - xform o4 ò
    - xform i1 ī
    - xform i2 î
    - xform i3 í
    - xform i4 ì
    - xform u1 ū
    - xform u2 û
    - xform u3 ú
    - xform u4 ù
    - xform y1 ȳ
    - xform y2 ŷ
    - xform y3 ý
    - xform y4 ỳ
    - xform/([a-z]+)[0-4]/$1/

reverse_lookup:
  dictionary: luna_pinyin
  enable_completion: false
  prefix: "`"
  tips: 〔朙月拼音〕
  preedit_format:
    - xform/([nljqxy])v/$1ü/
  comment_format:
    - "xlit|zyxwvutsrqponmlkjihgfedcba01234|"

punctuator:
  import_preset: symbols

key_binder:
  import_preset: default
  bindings:
    - { when: composing, accept: KP_Subtract, send: minus }
    - { when: composing, accept: KP_Divide, send: slash }
    - { when: composing, accept: KP_Multiply, send: asterisk }
    - { when: composing, accept: KP_Add, send: plus }
    - { when: composing, accept: KP_0, send: 0 }
    - { when: composing, accept: KP_1, send: 1 }
    - { when: composing, accept: KP_2, send: 2 }
    - { when: composing, accept: KP_3, send: 3 }
    - { when: composing, accept: KP_4, send: 4 }
    - { when: composing, accept: KP_5, send: 5 }
    - { when: composing, accept: KP_6, send: 6 }
    - { when: composing, accept: KP_7, send: 7 }
    - { when: composing, accept: KP_8, send: 8 }
    - { when: composing, accept: KP_9, send: 9 }
    #- {accept: "Shift+Shift_L", send: 2, when: has_menu}
    #- {accept: "Shift+Shift_R", send: 3, when: has_menu}
    - { when: composing, accept: minus, send: minus }
    - { when: composing, accept: equal, send: equal }
    - { when: composing, accept: period, send: period }
    - { when: has_menu, accept: minus, send: minus }
    - { when: has_menu, accept: equal, send: equal }
    - { when: has_menu, accept: period, send: period }
    #- { when: composing, accept: Return, send: Shift+Return }

recognizer:
  import_preset: default
  patterns:
    reverse_lookup: "`[a-z]*'?$"
    punct: '^/[a-z]*$'
